# Unity AI Production Docker Compose Configuration
# Complete setup with Traefik reverse proxy, SSL/TLS, and monitoring

version: '3.9'

services:
  # Traefik Reverse Proxy
  traefik:
    image: traefik:v3.0
    container_name: unityai-traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Dashboard (only in dev)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ../traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ../traefik/dynamic.yml:/etc/traefik/dynamic.yml:ro
      - traefik_acme:/acme
    environment:
      - CF_API_EMAIL=${CLOUDFLARE_EMAIL}
      - CF_DNS_API_TOKEN=${CLOUDFLARE_TOKEN}
    networks:
      - unityai-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.unit-y-ai.io`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.middlewares=auth-basic"

  # Main UnityAI Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: unityai-app
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    env_file:
      - .env.fastapi
      - .env.security
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - N8N_BASE_URL=http://n8n:5678
      - ENVIRONMENT=production
    depends_on:
      - db
      - redis
      - n8n
    networks:
      - unityai-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.unit-y-ai.io`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls.certresolver=letsencrypt"
      - "traefik.http.routers.api.middlewares=rate-limit,security-headers"
      - "traefik.http.services.unityai-api.loadbalancer.server.port=8000"
      # Webhook endpoints
      - "traefik.http.routers.webhooks.rule=Host(`webhooks.unit-y-ai.io`)"
      - "traefik.http.routers.webhooks.entrypoints=websecure"
      - "traefik.http.routers.webhooks.tls.certresolver=letsencrypt"
      - "traefik.http.routers.webhooks.middlewares=rate-limit-webhooks,security-headers"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: unityai-db
    restart: unless-stopped
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backups:/backups
    env_file:
      - .env.database
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    networks:
      - unityai-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache & Queue
  redis:
    image: redis:7-alpine
    container_name: unityai-redis
    restart: unless-stopped
    volumes:
      - redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - unityai-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # n8n Workflow Engine
  n8n:
    build:
      context: ./n8n
      dockerfile: Dockerfile
    container_name: unityai-n8n
    restart: unless-stopped
    volumes:
      - n8n-data:/home/node/.n8n
      - ./n8n/workflows:/home/node/.n8n/workflows
    env_file:
      - .env.database
      - .env.workflows
      - .env.executions
    environment:
      - N8N_HOST=n8n.unit-y-ai.io
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - WEBHOOK_URL=https://webhooks.unit-y-ai.io/
      - N8N_EDITOR_BASE_URL=https://n8n.unit-y-ai.io
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD}
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=db
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
      - DB_POSTGRESDB_USER=${POSTGRES_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_POSTGRESDB_SCHEMA=n8n
      - EXECUTIONS_MODE=queue
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_BULL_REDIS_PORT=6379
      - QUEUE_BULL_REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - unityai-network
    depends_on:
      - db
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.rule=Host(`n8n.unit-y-ai.io`)"
      - "traefik.http.routers.n8n.entrypoints=websecure"
      - "traefik.http.routers.n8n.tls.certresolver=letsencrypt"
      - "traefik.http.routers.n8n.middlewares=security-headers"
      - "traefik.http.services.unityai-n8n.loadbalancer.server.port=5678"

  # n8n Worker (for queue processing)
  n8n-worker:
    build:
      context: ./n8n
      dockerfile: Dockerfile
    container_name: unityai-n8n-worker
    restart: unless-stopped
    command: n8n worker
    volumes:
      - n8n-data:/home/node/.n8n
    env_file:
      - .env.database
      - .env.workflows
      - .env.executions
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=db
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
      - DB_POSTGRESDB_USER=${POSTGRES_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_POSTGRESDB_SCHEMA=n8n
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_BULL_REDIS_PORT=6379
      - QUEUE_BULL_REDIS_PASSWORD=${REDIS_PASSWORD}
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
    networks:
      - unityai-network
    depends_on:
      - db
      - redis
      - n8n
    deploy:
      replicas: 2

  # Prometheus Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: unityai-prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - unityai-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`metrics.unit-y-ai.io`)"
      - "traefik.http.routers.prometheus.entrypoints=websecure"
      - "traefik.http.routers.prometheus.tls.certresolver=letsencrypt"
      - "traefik.http.routers.prometheus.middlewares=auth-basic,security-headers"
      - "traefik.http.services.unityai-prometheus.loadbalancer.server.port=9090"

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: unityai-grafana
    restart: unless-stopped
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=grafana.unit-y-ai.io
      - GF_SERVER_ROOT_URL=https://grafana.unit-y-ai.io
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_STRICT_TRANSPORT_SECURITY=true
    networks:
      - unityai-network
    depends_on:
      - prometheus
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.unit-y-ai.io`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
      - "traefik.http.routers.grafana.middlewares=security-headers"
      - "traefik.http.services.unityai-grafana.loadbalancer.server.port=3000"

  # Redis Exporter for Prometheus
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: unityai-redis-exporter
    restart: unless-stopped
    environment:
      - REDIS_ADDR=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - unityai-network
    depends_on:
      - redis

  # PostgreSQL Exporter for Prometheus
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: unityai-postgres-exporter
    restart: unless-stopped
    environment:
      - DATA_SOURCE_NAME=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?sslmode=disable
    networks:
      - unityai-network
    depends_on:
      - db

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  n8n-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  unityai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16