# Docker Swarm Stack Configuration
# Deploy with: docker stack deploy -c docker-compose.swarm.yml unityai

version: '3.9'

# ───────────────────────────────────────────────────────────
# Secrets (müssen vorab per `docker secret create …` existieren)
# ───────────────────────────────────────────────────────────
secrets:
  pg_pw:                 { external: true }
  n8n_admin_password:    { external: true }
  n8n_encryption_key:    { external: true }
  redis_pw:              { external: true }
  runner_token:          { external: true }
  cloudflare_email:      { external: true }
  cloudflare_token:      { external: true }
  openai_api_key:        { external: true }
  anthropic_api_key:     { external: true }
  groq_api_key:          { external: true }

# ───────────────────────────────────────────────────────────
# Networks
# ───────────────────────────────────────────────────────────
networks:
  unityai-network:
    driver: overlay
    attachable: true
    external: false
  traefik-public:
    driver: overlay
    external: true

# ───────────────────────────────────────────────────────────
# Volumes
# ───────────────────────────────────────────────────────────
volumes:
  postgres-data:
  redis-data:
  n8n-data:
  traefik-acme:
  app-logs:
  app-uploads:

# ───────────────────────────────────────────────────────────
# Services
# ───────────────────────────────────────────────────────────
services:

  # ---------- Traefik Reverse Proxy ----------
  traefik:
    image: traefik:v3.0
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 8080
        published: 8080
        protocol: tcp
        mode: ingress
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-acme:/acme
    secrets:
      - cloudflare_email
      - cloudflare_token
    environment:
      - CF_API_EMAIL_FILE=/run/secrets/cloudflare_email
      - CF_DNS_API_TOKEN_FILE=/run/secrets/cloudflare_token
    networks:
      - traefik-public
      - unityai-network
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=traefik-public"
        - "traefik.http.routers.traefik.rule=Host(`traefik.unit-y-ai.io`)"
        - "traefik.http.routers.traefik.entrypoints=websecure"
        - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
        - "traefik.http.routers.traefik.service=api@internal"
        - "traefik.http.services.traefik.loadbalancer.server.port=8080"
    command:
      - --api.dashboard=true
      - --api.insecure=false
      - --providers.swarm=true
      - --providers.swarm.exposedbydefault=false
      - --providers.swarm.network=traefik-public
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.dnschallenge=true
      - --certificatesresolvers.letsencrypt.acme.dnschallenge.provider=cloudflare
      - --certificatesresolvers.letsencrypt.acme.email=admin@unit-y-ai.io
      - --certificatesresolvers.letsencrypt.acme.storage=/acme/acme.json
      - --log.level=INFO
      - --accesslog=true

  # ---------- PostgreSQL ----------
  db:
    image: postgres:15-alpine
    secrets:
      - pg_pw
    environment:
      POSTGRES_PASSWORD_FILE: /run/secrets/pg_pw
      POSTGRES_USER: n8n_user
      POSTGRES_DB: n8n
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - unityai-network
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.postgres == true
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U n8n_user"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # ---------- Redis (Queue) ----------
  redis:
    image: redis:7-alpine
    secrets:
      - redis_pw
    command: >
      sh -c 'redis-server --requirepass "$$(cat /run/secrets/redis_pw)"
                         --appendonly yes
                         --maxmemory 256mb
                         --maxmemory-policy allkeys-lru'
    volumes:
      - redis-data:/data
    networks:
      - unityai-network
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.redis == true
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    healthcheck:
      test: ["CMD", "sh", "-c", "redis-cli -a \"$$(cat /run/secrets/redis_pw)\" ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # ---------- n8n Core ----------
  n8n:
    image: n8nio/n8n:${IMAGE_TAG:-latest}
    secrets:
      - pg_pw
      - n8n_admin_password
      - n8n_encryption_key
      - redis_pw
    environment:
      # Datenbank
      DB_POSTGRESDB_HOST: db
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: n8n
      DB_POSTGRESDB_USER: n8n_user
      DB_POSTGRESDB_PASSWORD_FILE: /run/secrets/pg_pw
      # Basic-Auth & Encryption
      N8N_BASIC_AUTH_ACTIVE: "true"
      N8N_BASIC_AUTH_USER: admin
      N8N_BASIC_AUTH_PASSWORD_FILE: /run/secrets/n8n_admin_password
      N8N_ENCRYPTION_KEY_FILE: /run/secrets/n8n_encryption_key
      # Redis-Passwort für Queue
      QUEUE_BULL_REDIS_HOST: redis
      QUEUE_BULL_REDIS_PORT: 6379
      QUEUE_BULL_REDIS_DB: 0
      QUEUE_BULL_REDIS_PASSWORD_FILE: /run/secrets/redis_pw
      # Swarm-spezifische Einstellungen
      N8N_HOST: n8n.unit-y-ai.io
      N8N_PROTOCOL: https
      N8N_PORT: 443
      WEBHOOK_URL: https://n8n.unit-y-ai.io
      # Performance
      N8N_PAYLOAD_SIZE_MAX: 16
      EXECUTIONS_DATA_PRUNE: "true"
      EXECUTIONS_DATA_MAX_AGE: 168
    volumes:
      - n8n-data:/home/node/.n8n
    networks:
      - unityai-network
      - traefik-public
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.n8n == true
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=traefik-public"
        - "traefik.http.routers.n8n.rule=Host(`n8n.unit-y-ai.io`)"
        - "traefik.http.routers.n8n.entrypoints=websecure"
        - "traefik.http.routers.n8n.tls.certresolver=letsencrypt"
        - "traefik.http.services.n8n.loadbalancer.server.port=5678"

  # ---------- External Runner ----------
  runner-launcher:
    image: n8nio/n8n:${IMAGE_TAG:-latest}
    command: n8n runner
    secrets:
      - runner_token
      - redis_pw
    environment:
      N8N_RUNNERS_AUTH_TOKEN_FILE: /run/secrets/runner_token
      N8N_RUNNERS_MODE: external
      QUEUE_BULL_REDIS_HOST: redis
      QUEUE_BULL_REDIS_PORT: 6379
      QUEUE_BULL_REDIS_DB: 0
      QUEUE_BULL_REDIS_PASSWORD_FILE: /run/secrets/redis_pw
    networks:
      - unityai-network
    deploy:
      mode: replicated
      replicas: 2
      placement:
        constraints:
          - node.labels.worker == true
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # ---------- FastAPI App ----------
  app:
    image: ${DOCKER_REGISTRY:-}unityai-app:${IMAGE_TAG:-latest}
    secrets:
      - pg_pw
      - redis_pw
    environment:
      DATABASE_URL: postgresql://n8n_user:$$(cat /run/secrets/pg_pw)@db:5432/n8n
      REDIS_URL: redis://default:$$(cat /run/secrets/redis_pw)@redis:6379/0
      N8N_BASE_URL: http://n8n:5678
      PYTHON_WORKER_URL: http://python-worker:8001
      ENVIRONMENT: production
      SECRET_KEY: ${SECRET_KEY:-unityai-production-secret-key-12345}
      N8N_API_KEY: ${N8N_API_KEY:-placeholder-api-key}
      N8N_USERNAME: admin
      N8N_PASSWORD: admin123
      N8N_API_BASE_URL: http://n8n:5678
      # Swarm-spezifische Einstellungen
      HOST: 0.0.0.0
      PORT: 8000
      WORKERS: 2
    volumes:
      - app-logs:/app/logs
      - app-uploads:/app/uploads
    networks:
      - unityai-network
      - traefik-public
    deploy:
      mode: replicated
      replicas: 2
      placement:
        constraints:
          - node.labels.app == true
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=traefik-public"
        - "traefik.http.routers.api.rule=Host(`api.unit-y-ai.io`)"
        - "traefik.http.routers.api.entrypoints=websecure"
        - "traefik.http.routers.api.tls.certresolver=letsencrypt"
        - "traefik.http.services.api.loadbalancer.server.port=8000"
        - "traefik.http.services.api.loadbalancer.healthcheck.path=/health"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ---------- Python Worker ----------
  python-worker:
    image: ${DOCKER_REGISTRY:-}unityai-python-worker:${IMAGE_TAG:-latest}
    secrets:
      - pg_pw
      - redis_pw
      - openai_api_key
      - anthropic_api_key
      - groq_api_key
    environment:
      # Database
      DATABASE_URL: postgresql://unityai_user:$$(cat /run/secrets/pg_pw)@db:5432/unityai
      REDIS_URL: redis://default:$$(cat /run/secrets/redis_pw)@redis:6379/0
      # API Keys
      OPENAI_API_KEY_FILE: /run/secrets/openai_api_key
      ANTHROPIC_API_KEY_FILE: /run/secrets/anthropic_api_key
      GROQ_API_KEY_FILE: /run/secrets/groq_api_key
      # Worker Settings
      WORKER_CONCURRENCY: 4
      WORKER_PREFETCH_MULTIPLIER: 1
      WORKER_MAX_TASKS_PER_CHILD: 1000
      # Logging
      LOG_LEVEL: INFO
      PYTHONUNBUFFERED: 1
    volumes:
      - type: bind
        source: /opt/unityai/logs
        target: /app/logs
    networks:
      - unityai-network
    deploy:
      mode: replicated
      replicas: 3
      placement:
        constraints:
          - node.labels.worker == true
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "python", "-c", "import celery; print('OK')"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - db
      - redis

  # ---------- Frontend ----------
  frontend:
    image: ${DOCKER_REGISTRY:-}unityai-frontend:${IMAGE_TAG:-latest}
    environment:
      - REACT_APP_API_URL=https://api.unit-y-ai.io
      - REACT_APP_N8N_URL=https://n8n.unit-y-ai.io
      - REACT_APP_PLAYGROUND_URL=https://playground.unit-y-ai.io
    networks:
      - unityai-network
      - traefik-public
    deploy:
      mode: replicated
      replicas: 2
      placement:
        constraints:
          - node.labels.app == true
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=traefik-public"
        - "traefik.http.routers.frontend.rule=Host(`app.unit-y-ai.io`)"
        - "traefik.http.routers.frontend.entrypoints=websecure"
        - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
        - "traefik.http.services.frontend.loadbalancer.server.port=3000"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # ---------- n8n API Playground ----------
  n8n-playground:
    image: ${DOCKER_REGISTRY:-}unityai-n8n-playground:${IMAGE_TAG:-latest}
    secrets:
      - pg_pw
      - redis_pw
      - n8n_admin_password
      - n8n_encryption_key
      - n8n_api_key
      - secret_key
      
    environment:
      # Database
      DATABASE_URL: postgresql://n8n_user:$$(cat /run/secrets/pg_pw)@db:5432/n8n
      REDIS_URL: redis://default:$$(cat /run/secrets/redis_pw)@redis:6379/0
      # n8n Integration
      N8N_BASE_URL: http://n8n:5678
      N8N_API_KEY_FILE: /run/secrets/n8n_admin_password
      # FastAPI Integration
      FASTAPI_BASE_URL: http://app:8000
      # Production Settings
      ENVIRONMENT: production
      DEBUG: "true"
      LOG_LEVEL: INFO
      # Security
      JWT_SECRET_KEY_FILE: /run/secrets/n8n_encryption_key
      SECRET_KEY_FILE: /run/secrets/secret_key
      # Monitoring
      PROMETHEUS_ENABLED: "true"
      GRAFANA_ENABLED: "true"
    volumes:
      - type: bind
        source: /opt/unityai/logs
        target: /app/logs
      - type: bind
        source: /opt/unityai/data
        target: /app/data
    networks:
      - unityai-network
      - traefik-public
    deploy:
      mode: replicated
      replicas: 2
      placement:
        constraints:
          - node.labels.app == true
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=traefik-public"
        - "traefik.http.routers.playground.rule=Host(`playground.unit-y-ai.io`)"
        - "traefik.http.routers.playground.entrypoints=websecure"
        - "traefik.http.routers.playground.tls.certresolver=letsencrypt"
        - "traefik.http.services.playground.loadbalancer.server.port=8080"
        - "traefik.http.services.playground.loadbalancer.healthcheck.path=/health"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - db
      - redis
      - n8n