

# ───────────────────────────────────────────────────────────
# Secrets (müssen vorab per `docker secret create …` existieren)
# ───────────────────────────────────────────────────────────
secrets:
  pg_pw:                 { external: true }
  n8n_admin_password:    { external: true }
  n8n_encryption_key:    { external: true }
  redis_pw:              { external: true }
  runner_token:          { external: true }

# ───────────────────────────────────────────────────────────
# Networks
# ───────────────────────────────────────────────────────────
networks:
  unityai-network:
    driver: overlay      # für Swarm (bridge, wenn single-node compose)

# ───────────────────────────────────────────────────────────
# Volumes
# ───────────────────────────────────────────────────────────
volumes:
  postgres-data:
  redis-data:
  n8n-data:

# ───────────────────────────────────────────────────────────
# Services
# ───────────────────────────────────────────────────────────
services:

  # ---------- PostgreSQL ----------
  db:
    image: postgres:15-alpine
    secrets: [pg_pw]
    environment:
      POSTGRES_PASSWORD_FILE: /run/secrets/pg_pw
      POSTGRES_USER: n8n_user
      POSTGRES_DB:  n8n
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U n8n_user"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: [unityai-network]

  # ---------- Redis (Queue) ----------
  redis:
    image: redis:7-alpine
    secrets: [redis_pw]
    command: >
      redis-server --requirepass $(cat /run/secrets/redis_pw)
                   --appendonly yes
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "$(cat /run/secrets/redis_pw)", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: [unityai-network]

  # ---------- n8n Core ----------
  n8n:
    image: ghcr.io/Flissel/n8n:${IMAGE_TAG:-latest}
    secrets: [pg_pw, n8n_admin_password, n8n_encryption_key, redis_pw]
    env_file:
      - n8n/env/.env.common
      - n8n/env/.env.queue
      - n8n/env/.env.nodes
      - n8n/env/.env.security
      - n8n/env/.env.secrets
      - n8n/env/.env.timezone
      - n8n/env/.env.taskrunners
      
    environment:
      # Datenbank
      DB_POSTGRESDB_PASSWORD_FILE: /run/secrets/pg_pw
      # Basic-Auth & Encryption
      N8N_BASIC_AUTH_PASSWORD_FILE: /run/secrets/n8n_admin_password
      N8N_ENCRYPTION_KEY_FILE:     /run/secrets/n8n_encryption_key
      # Redis-Passwort für Queue
      QUEUE_BULL_REDIS_PASSWORD_FILE: /run/secrets/redis_pw
    volumes:
      - n8n-data:/home/node/.n8n
    depends_on: [db, redis]
    networks: [unityai-network]

  # ---------- External Runner ----------
  runner-launcher:
    image: ghcr.io/Flissel/n8n:${IMAGE_TAG:-latest}
    command: n8n runner
    secrets: [runner_token, redis_pw]
    env_file:
      - n8n/env/.env.taskrunners
    environment:
      N8N_RUNNERS_AUTH_TOKEN_FILE: /run/secrets/runner_token
      QUEUE_BULL_REDIS_PASSWORD_FILE: /run/secrets/redis_pw
    deploy:
      replicas: 1
      restart_policy: { condition: on-failure }
    depends_on: [redis, n8n]
    networks: [unityai-network]

  # ---------- FastAPI App ----------
  app:
    build:
      context: .
      target: ${BUILD_TARGET:-production}
    secrets: [pg_pw, redis_pw]
    env_file:
      - .env.fastapi
      - .env.security
    environment:
      DATABASE_URL: postgresql://n8n_user:$(cat /run/secrets/pg_pw)@db:5432/n8n
      REDIS_URL:    redis://default:$(cat /run/secrets/redis_pw)@redis:6379/0
      N8N_BASE_URL: http://n8n:5678
      ENVIRONMENT:  production
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    depends_on: [db, redis, n8n]
    networks: [unityai-network]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

