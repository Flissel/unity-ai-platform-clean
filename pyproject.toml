[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "unityai"
version = "1.0.0"
description = "UnityAI - Intelligent Automation Platform"
readme = "README.md"
requires-python = ">=3.9"
authors = [
    {name = "UnityAI Team", email = "team@unityai.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
keywords = ["ai", "automation", "workflow", "api", "fastapi", "n8n", "autogen"]
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "pydantic>=2.0.0",
    "requests>=2.31.0",
]

[project.urls]
Homepage = "https://github.com/unityai/unityai"
Documentation = "https://docs.unityai.com"
Repository = "https://github.com/unityai/unityai.git"
"Bug Tracker" = "https://github.com/unityai/unityai/issues"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
    "pytest-timeout>=2.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.24.0",
]
full = [
    "sqlalchemy>=2.0.0",
    "alembic>=1.13.0",
    "psycopg2-binary>=2.9.0",
    "redis>=5.0.0",
    "aioredis>=2.0.0",
    "httpx>=0.25.0",
    "aiohttp>=3.9.0",
    "passlib[bcrypt]>=1.7.0",
    "python-jose[cryptography]>=3.3.0",
    "python-multipart>=0.0.6",
    "cryptography>=42.0.0",
    "autogen-core>=0.2.0",
    "openai>=1.3.0",
    "azure-openai>=1.3.0",
    "psutil>=5.9.0",
    "structlog>=23.0.0",
    "coloredlogs>=15.0.0",
    "python-json-logger>=2.0.0",
    "python-dotenv>=1.0.0",
    "click>=8.1.0",
    "typer>=0.9.0",
    "python-dateutil>=2.8.0",
    "pytz>=2023.3",
    "tenacity>=8.2.0",
    "jinja2>=3.1.0",
    "markupsafe>=2.1.0",
    "pillow>=10.1.0",
    "validators>=0.22.0",
    "anyio>=4.1.0",
    "trio>=0.23.0",
    "supervisor>=4.2.0",
    "gevent>=23.9.0",
    "eventlet>=0.33.0",
    "waitress>=2.1.0",
]

[project.scripts]
unityai = "unityai.main:main"
unityai-server = "unityai.server:main"
unityai-worker = "unityai.worker:main"
unityai-cli = "unityai.cli:main"

[tool.setuptools]
packages = ["unityai"]

[tool.setuptools.package-dir]
unityai = "src"

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | migrations
  )/
)
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests"]
skip_glob = ["migrations/*"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "E501", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
    ".venv",
    "migrations",
]
per-file-ignores = [
    "__init__.py:F401",
    "tests/*:S101",
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "autogen.*",
    "openai.*",
    "azure.*",
    "redis.*",
    "aioredis.*",
    "psycopg2.*",
    "passlib.*",
    "jose.*",
    "structlog.*",
    "coloredlogs.*",
    "supervisor.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m "not slow"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "api: marks tests as API tests",
    "db: marks tests as database tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
ignore_errors = true
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

[tool.bandit]
exclude_dirs = ["tests", "migrations"]
skips = ["B101", "B601"]

[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"]